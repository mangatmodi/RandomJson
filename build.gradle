buildscript {
    repositories {
        mavenLocal()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        jcenter()
        mavenCentral()
    }
}
plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id "org.jetbrains.kotlin.jvm" version "1.3.30"
}
compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10

    kotlinOptions {
        jvmTarget = "10" s
        apiVersion = "1.3"
        languageVersion = "1.3"
    }
}

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile "ch.qos.logback:logback-classic:1.2.2"
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "org.slf4j:jul-to-slf4j:1.7.25"
    compile "org.slf4j:jcl-over-slf4j:1.7.25"
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8'

    compile "info.picocli:picocli:3.9.3"


    testCompile "org.junit.jupiter:junit-jupiter-api:5.4.0-M1"
    testCompile "org.junit.jupiter:junit-jupiter-engine:5.4.0-M1"
    testCompile "org.hamcrest:hamcrest-junit:2.0.0.0"
    testCompile 'io.kotlintest:kotlintest:2.0.7'

}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}
signing {
    sign configurations.archives
}

group = "com.github.mangatmodi"
archivesBaseName = "randomjson"
version = "1.0.0"

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/      ") {
                authentication(userName: project.findProperty('ossrhUsername'), password: project.findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.findProperty('ossrhUsername'), password: project.findProperty('ossrhPassword'))
            }

            pom.project {
                name 'Random Json Creator'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Provides a library to create a random json string'
                url 'https://github.com/mangatmodi/RandomJson'

                scm {
                    connection 'scm:git:https://github.com/mangatmodi/RandomJson.git'
                    developerConnection 'scm:git:https://github.com/mangatmodi/RandomJson.git'
                    url 'https://github.com/mangatmodi/RandomJson.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id 'mangatmodi'
                        name 'Mangat Rai Modi'
                        email 'mangatmodi@gmail.com'
                    }
                }
            }
        }
    }
}
